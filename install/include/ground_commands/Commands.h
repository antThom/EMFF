// Generated by gencpp from file ground_commands/Commands.msg
// DO NOT EDIT!


#ifndef GROUND_COMMANDS_MESSAGE_COMMANDS_H
#define GROUND_COMMANDS_MESSAGE_COMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ground_commands
{
template <class ContainerAllocator>
struct Commands_
{
  typedef Commands_<ContainerAllocator> Type;

  Commands_()
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , X_Dot(0.0)
    , Y_Dot(0.0)
    , Z_Dot(0.0)
    , Psi(0.0)
    , Theta(0.0)
    , Phi(0.0)
    , Psi_Dot(0.0)
    , Theta_Dot(0.0)
    , Phi_Dot(0.0)
    , Mag_X(0.0)
    , Mag_Y(0.0)
    , Mag_Z(0.0)  {
    }
  Commands_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , X_Dot(0.0)
    , Y_Dot(0.0)
    , Z_Dot(0.0)
    , Psi(0.0)
    , Theta(0.0)
    , Phi(0.0)
    , Psi_Dot(0.0)
    , Theta_Dot(0.0)
    , Phi_Dot(0.0)
    , Mag_X(0.0)
    , Mag_Y(0.0)
    , Mag_Z(0.0)  {
  (void)_alloc;
    }



   typedef double _X_type;
  _X_type X;

   typedef double _Y_type;
  _Y_type Y;

   typedef double _Z_type;
  _Z_type Z;

   typedef double _X_Dot_type;
  _X_Dot_type X_Dot;

   typedef double _Y_Dot_type;
  _Y_Dot_type Y_Dot;

   typedef double _Z_Dot_type;
  _Z_Dot_type Z_Dot;

   typedef double _Psi_type;
  _Psi_type Psi;

   typedef double _Theta_type;
  _Theta_type Theta;

   typedef double _Phi_type;
  _Phi_type Phi;

   typedef double _Psi_Dot_type;
  _Psi_Dot_type Psi_Dot;

   typedef double _Theta_Dot_type;
  _Theta_Dot_type Theta_Dot;

   typedef double _Phi_Dot_type;
  _Phi_Dot_type Phi_Dot;

   typedef double _Mag_X_type;
  _Mag_X_type Mag_X;

   typedef double _Mag_Y_type;
  _Mag_Y_type Mag_Y;

   typedef double _Mag_Z_type;
  _Mag_Z_type Mag_Z;




  typedef boost::shared_ptr< ::ground_commands::Commands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ground_commands::Commands_<ContainerAllocator> const> ConstPtr;

}; // struct Commands_

typedef ::ground_commands::Commands_<std::allocator<void> > Commands;

typedef boost::shared_ptr< ::ground_commands::Commands > CommandsPtr;
typedef boost::shared_ptr< ::ground_commands::Commands const> CommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ground_commands::Commands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ground_commands::Commands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ground_commands

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ground_commands': ['/home/anthony/EMFF/src/ground_commands/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ground_commands::Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_commands::Commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_commands::Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_commands::Commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_commands::Commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_commands::Commands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ground_commands::Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d98a8c001152cf3f66becd92df597c9";
  }

  static const char* value(const ::ground_commands::Commands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d98a8c001152cf3ULL;
  static const uint64_t static_value2 = 0xf66becd92df597c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ground_commands::Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ground_commands/Commands";
  }

  static const char* value(const ::ground_commands::Commands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ground_commands::Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 X\n\
float64 Y\n\
float64 Z\n\
float64 X_Dot\n\
float64 Y_Dot\n\
float64 Z_Dot\n\
float64 Psi\n\
float64 Theta\n\
float64 Phi\n\
float64 Psi_Dot\n\
float64 Theta_Dot\n\
float64 Phi_Dot\n\
float64 Mag_X\n\
float64 Mag_Y\n\
float64 Mag_Z\n\
";
  }

  static const char* value(const ::ground_commands::Commands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ground_commands::Commands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
      stream.next(m.X_Dot);
      stream.next(m.Y_Dot);
      stream.next(m.Z_Dot);
      stream.next(m.Psi);
      stream.next(m.Theta);
      stream.next(m.Phi);
      stream.next(m.Psi_Dot);
      stream.next(m.Theta_Dot);
      stream.next(m.Phi_Dot);
      stream.next(m.Mag_X);
      stream.next(m.Mag_Y);
      stream.next(m.Mag_Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Commands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ground_commands::Commands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ground_commands::Commands_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
    s << indent << "X_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.X_Dot);
    s << indent << "Y_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.Y_Dot);
    s << indent << "Z_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.Z_Dot);
    s << indent << "Psi: ";
    Printer<double>::stream(s, indent + "  ", v.Psi);
    s << indent << "Theta: ";
    Printer<double>::stream(s, indent + "  ", v.Theta);
    s << indent << "Phi: ";
    Printer<double>::stream(s, indent + "  ", v.Phi);
    s << indent << "Psi_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.Psi_Dot);
    s << indent << "Theta_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.Theta_Dot);
    s << indent << "Phi_Dot: ";
    Printer<double>::stream(s, indent + "  ", v.Phi_Dot);
    s << indent << "Mag_X: ";
    Printer<double>::stream(s, indent + "  ", v.Mag_X);
    s << indent << "Mag_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Mag_Y);
    s << indent << "Mag_Z: ";
    Printer<double>::stream(s, indent + "  ", v.Mag_Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUND_COMMANDS_MESSAGE_COMMANDS_H
